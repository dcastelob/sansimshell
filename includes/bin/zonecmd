#!/bin/bash
# comando "switchshow"

PATH="/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/dcastelob/.local/bin:/home/dcastelob/bin"

source includes/conf/options.conf

CFG_FILE="includes/var/cfgs.db"
ZONE_FILE="includes/var/zones.db"
ALIAS_FILE="includes/var/alias.db"
PORTS_FILE="includes/var/ports.db"
DEFZONE_FILE="includes/var/defzones.db"

PRINCIPAL_FILE="$ZONE_FILE"

ENTIDADE="Zone"

function consulte()
{
	ITEM="$1"
	FILE="$2"
	EXISTE=""
	EXISTE=$(cat "$FILE" | grep "^$ITEM")
	if [ -z "$EXISTE" ];then
		#não existe
		echo 0
	else
		#existe
		echo 1	
	fi
}

function consulte2()
{
	ITEM="$1"
	FILE="$2"
	EXISTE=""
	EXISTE=$(cat "$FILE" | grep "$ITEM")
	if [ -z "$EXISTE" ];then
		echo 0
	else
		echo 1	
	fi
}

function getItem()
{
	# função retorna as linhas inteira do registo localizado no arquivo de DB
	ITEM="$1"
	FILE="$2"
	EXISTE=""
	EXISTE=$(cat "$FILE" | grep "^$ITEM")
	#echo "cat $FILE | grep ^$ITEM"  #DEBUG
	echo "$EXISTE"
}

function listAll()
{
	# A variavel $AUTO_LIST de controle está presente no arquivo conf/options.conf
	# controlando exibição automatica após atualizações
	if [ "$1" == "--auto" ]; then
		VAR=$(echo "$AUTO_LIST" | tr [a-z] [A-Z])
		case "$VAR" in
			Y|YES|S|SIM)
				continue
				;;
			N|NO|NAO|NÃO)
				return 1
				;;
			*)
				return 2
				;;
		esac
	fi
	
	DADOS=$(cat "$PRINCIPAL_FILE")
	if [ -n "$DADOS" ];then
        if [ -n "$1" ];then
            ZONE_FILTER=$(cat "$PRINCIPAL_FILE"| grep "^$1" | sed 's/|/\t\t/g' )
            if [ -n "$ZONE_FILTER" ];then    
                echo -e " zone:\t$ZONE_FILTER"
            else
                echo -e " zone:\t$1 not found! Show all zones."
                cat "$PRINCIPAL_FILE" | sed 's/|/\t\t/g'    
            fi
        else
		    cat "$PRINCIPAL_FILE" | sed 's/|/\t\t/g'
        fi
	else
		echo "Data not found!"	
	fi	
}


function insert()
{
	NAME="$1"
	ALIASES="$2"
	
	ALIAS1=$(echo "$2" | awk -F";" '{print $1}')
	ALIAS2=$(echo "$2" | awk -F";" '{print $2}')
	
	#echo "ALIASES- $ALIAS1 e $ALIAS2"  #DEBUG
	EXISTE1=""
	EXISTE2=""
	
	EXISTE1=$(consulte "$NAME" "$PRINCIPAL_FILE")
	EXISTE2=$(consulte2 "$ALIAS1" "$ALIAS_FILE")
	EXISTE3=$(consulte2 "$ALIAS2" "$ALIAS_FILE")
	
	if [ "$EXISTE1" -eq 0 ] && [ "$EXISTE2" -eq 1 ] && [ "$EXISTE3" -eq 1 ]  ;then
		echo "$NAME|$ALIAS1|$ALIAS2" >> "$PRINCIPAL_FILE"
		echo "$ENTIDADE \"$NAME\" created."
		listAll "--auto"
	else
		echo "Could not create $ENTIDADE. Check the <$ENTIDADE. Name> or <Alias names> reported"

	fi
}

function insertMultiplos()
{
	NAME="$1"
	ITENS="$2"
	
	# Testar se ja existe a entidade, evitar cadastro repetido
	EXISTE_NAME=""
	EXISTE_NAME=$(consulte "$NAME" "$PRINCIPAL_FILE")
	#echo "EXISTE_NAME: $EXISTE_NAME"
	if [ "$EXISTE_NAME" -eq 1 ];then
		echo "Could not create $ENTIDADE. Check the $ENTIDADE Name: \"$NAME\" reported"
		return 1
	fi
	
	#Inlcuindo o nome como o primeiro campo
	NEW="$NAME"
	
	IFSOLD=$IFS
	IFS=";" 
	CONT=1
	for ITEM in $ITENS; do
		EXISTE_ITEM=""
		EXISTE_ITEM=$(consulte2 "$ITEM" "$ALIAS_FILE")
		#echo "1 NEW: $NEW"
		if [ "$EXISTE_ITEM" -eq 1 ];then
			NEW="${NEW}|$ITEM"
			#echo "2 NEW: $NEW"
		else
			echo "Could not create $ENTIDADE. Check the Alias name: \"$ITEM\" reported"
			return 2		
		fi
	done
	
	IFS=$IFSOLD
	
	#Caso não tenha caido em uma exceção ele vai escrever o arquivo no texto
	echo "$NEW" >> "$PRINCIPAL_FILE"
	echo "$ENTIDADE \"$NAME\" created."
	listAll "--auto"
}

function addnew()
{
	NAME="$1"
	ITENS="$2"
	
	# Testar se ja existe a entidade, assim só adicionará subitens se ela existir
	EXISTE_NAME=""
	EXISTE_NAME=$(consulte "$NAME" "$PRINCIPAL_FILE")
	#echo "EXISTE_NAME: $EXISTE_NAME"
	if [ "$EXISTE_NAME" -eq 0 ];then
		echo "Could not add itens for $ENTIDADE: \"$NAME\""
		return 1
	fi
	
	#Inlcuindo o registro inteiro ja existente como o primeiro campo
	NEW=$(getItem "$NAME" "$PRINCIPAL_FILE")	
	#echo "NEW: $NEW"  # DEBUG
	#NEW="$NAME"
	
	IFSOLD=$IFS
	IFS=";" 
	CONT=1
	for ITEM in $ITENS; do
		# Testando se é um subitem válido (ALIAS)
		EXISTE_ITEM=""
		EXISTE_ITEM=$(consulte2 "$ITEM" "$ALIAS_FILE")
		
		#echo "1 NEW: $NEW"
		if [ "$EXISTE_ITEM" -eq 1 ];then
			# Checando se os subitens ja existe cadastrado, evitando duplicações.
			EXISTE_SUBITEM=""
			EXISTE_SUBITEM=$(echo "$NEW" | grep $ITEM)
			echo "EXISTE_SUBITEM: $EXISTE_SUBITEM"
			if [ -z "$EXISTE_SUBITEM" ];then
				NEW="${NEW}|$ITEM"
				#echo "2 NEW: $NEW"
			else
				echo "Could not add new item name: \"$ITEM\". Already exists"
				return 3	
			fi			
		else
			echo "Could not add new item name: \"$ITEM\" not found!"
			return 2		
		fi
	done
	
	IFS=$IFSOLD
	
	#Caso não tenha caido em uma exceção ele vai escrever o arquivo no texto
	# Vai remover o registro antigo e vai incluir o novo devidamente alterado
	cat "$PRINCIPAL_FILE" | grep -v "^$NAME" > temp
	cat "temp" > "$PRINCIPAL_FILE"
	rm -f temp
	echo "$NEW" >> "$PRINCIPAL_FILE"
	echo "$ENTIDADE \"$NAME\" updated."
	listAll "--auto"
}

function delete()
{
	NAME="$1"
	EXISTE=""
	EXISTE=$(consulte "$NAME" "$PRINCIPAL_FILE")
	if [ "$EXISTE" -eq 0 ];then
		echo "$ENTIDADE \"$NAME\" not found!"
	else 
		cat "$PRINCIPAL_FILE" | grep -v "^$NAME" > temp
		cat "temp" > "$PRINCIPAL_FILE"
		rm -f temp
		echo "$ENTIDADE \"$NAME\" deleted."
		listAll "--auto"
	fi
}

function removeitem()
{
	NAME="$1"
	ITENS="$2"
	
	# Testar se ja existe a entidade, assim só adicionará subitens se ela existir
	EXISTE_NAME=""
	EXISTE_NAME=$(consulte "$NAME" "$PRINCIPAL_FILE")
	#echo "EXISTE_NAME: $EXISTE_NAME"
	if [ "$EXISTE_NAME" -eq 0 ];then
		echo "Could not remove itens for $ENTIDADE: \"$NAME\""
		return 1
	fi
	
	#Incluindo o registro inteiro ja existente como o primeiro campo
	NEW=$(getItem "$NAME" "$PRINCIPAL_FILE")	
	#echo "NEW: $NEW"  # DEBUG
	#NEW="$NAME"
	
	IFSOLD=$IFS
	IFS=";" 
	CONT=1
	for ITEM in $ITENS; do
		# Testando se é um subitem válido (ALIAS)
		EXISTE_ITEM=""
		EXISTE_ITEM=$(echo "$NEW | grep $ITEM")
		#echo "1 NEW: $NEW"
		if [ -n "$EXISTE_ITEM" ];then
				NEW=$(echo "${NEW}"| sed "s/|$ITEM//g")
				# echo "2 NEW: $NEW"  	3DEBUG
		else
			echo "Could not remove item name: \"$ITEM\" not found!"
			return 2		
		fi
	done
	
	IFS=$IFSOLD
	
	#Caso não tenha caido em uma exceção ele vai escrever o arquivo no texto
	# Vai remover o registro antigo e vai incluir o novo
	cat "$PRINCIPAL_FILE" | grep -v "^$NAME" > temp
	cat "temp" > "$PRINCIPAL_FILE"
	rm -f temp
	echo "$NEW" >> "$PRINCIPAL_FILE"
	echo "$ENTIDADE \"$NAME\" updated."
	listAll "--auto"
}


function rename()
{
	NAME="$1"
	NEW_NAME="$2"
	EXISTE=""
	EXISTE=$(consulte "$NAME" "$PRINCIPAL_FILE")
	if [ "$EXISTE" -eq 0 ];then
		echo "$ENTIDADE \"$NAME\" not found!"
	else 
		EXISTE=""
		EXISTE=$(consulte "$NEW_NAME" "$PRINCIPAL_FILE")
		if [ "$EXISTE" -eq 0 ];then
			NOVO=$(cat "$PRINCIPAL_FILE" | grep "^$NAME"| sed "s/$NAME/$NEW_NAME/" )
			cat "$PRINCIPAL_FILE" | grep -v "^$NAME" > temp
			cat "temp" > "$PRINCIPAL_FILE"
			echo "$NOVO" >> "$PRINCIPAL_FILE"
			echo "$ENTIDADE \"$NAME\" renamed for \"$NEW_NAME\"."
			listAll "--auto"
		else 
			echo "$ENTIDADE \"$NEW_NAME\" already exists."
		fi		
	fi
}


function copy()
{
	NAME="$1"
	NEW_NAME="$2"
	EXISTE=""
	EXISTE=$(consulte "$NAME" "$PRINCIPAL_FILE")
	if [ "$EXISTE" -eq 0 ];then
		echo "$ENTIDADE \"$NAME\" not found!"
		return 0
	else 
		EXISTE=""
		EXISTE=$(consulte "$NEW_NAME" "$PRINCIPAL_FILE")
		if [ "$EXISTE" -eq 0 ];then
			NOVO=$(cat "$PRINCIPAL_FILE" | grep "^$NAME"| sed "s/$NAME/$NEW_NAME/" )
			echo "$NOVO" >> "$PRINCIPAL_FILE"
			echo "$ENTIDADE \"$NAME\" copied for \"$NEW_NAME\"."
			listAll "--auto"
		else 
			echo "$ENTIDADE \"$NEW_NAME\" already exists."
		fi
		
	fi
}



OP=""
OP=$(echo "chamada- $0"| cut -d"/" -f4)
#echo "Opção: $OP"  ## DEBUG

case "$OP" in
	zonecreate)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <ZONE NAME> <\"ALIAS_1;ALIAS_2;...\">"
		else
			#insert "$1" "$2"
			insertMultiplos "$1" "$2"
		fi	
		;;
	zoneadd)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <ZONE NAME> <\"ALIAS_1;ALIAS_2;...\">"
		else
			addnew "$1" "$2"
		fi	
		;;	
		
	zoneshow)
		listAll "$1"
		;;
	
	zonedelete)
		if [ "$#" -lt 1 ]; then
			echo "Sintaxe error: $OP <ZONE NAME>"
		else
			delete "$1"
		fi	
		;;
	zoneremove)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <ZONE NAME> <\"ALIAS_1;ALIAS_2;...\">"
		else
			removeitem "$1" "$2"
		fi	
		;;
	zonerename)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <ZONE NAME> <NEW ZONE NAME>"
		else
			rename "$1" "$2"
		fi	
		;;
	zonecopy)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <ZONE NAME> <NEW ZONE NAME>"
		else
			copy "$1" "$2"
		fi	
		;;
	*)
		echo "Not implemented!"	
	;;
esac

