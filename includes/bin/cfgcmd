#!/bin/bash
# comando "switchshow"

PATH="/usr/lib64/qt-3.3/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/dcastelob/.local/bin:/home/dcastelob/bin"

source includes/conf/options.conf

CFG_FILE="includes/var/cfgs.db"
ZONE_FILE="includes/var/zones.db"
ALIAS_FILE="includes/var/alias.db"
PORTS_FILE="includes/var/ports.db"
DEFZONE_FILE="includes/var/defzones.db"

ENTIDADE="Cfg"

function consulte()
{
	ITEM="$1"
	FILE="$2"
	EXISTE=""
	EXISTE=$(cat "$FILE" | grep "^$ITEM")
	if [ -z "$EXISTE" ];then
		echo 0
	else
		echo 1	
	fi
}

function consulte2()
{
	ITEM="$1"
	FILE="$2"
	EXISTE=""
	EXISTE=$(cat "$FILE" | grep "$ITEM")
	if [ -z "$EXISTE" ];then
		echo 0
	else
		echo 1	
	fi
}

function listAllold()
{
#	echo "============================================================================="
#	echo " List - All ${ENTIDADE}s"
#	echo "============================================================================="	
	echo "Defined configuration:"
	cat "$CFG_FILE" | sed 's/-/\t-\t/g'
	echo
	cat "$DEFZONE_FILE" 
}

function listAll()
{
	# A variavel $AUTO_LIST de controle está presente no arquivo conf/options.conf
	# controlando exibição automatica após atualizações
	if [ "$1" == "--auto" ]; then
		VAR=$(echo "$AUTO_LIST" | tr [a-z] [A-Z])
		case "$VAR" in
			Y|YES|S|SIM)
				continue
				;;
			N|NO|NAO|NÃO)
				return 1
				;;
			*)
				return 2
				;;
		esac
	fi
	
	echo "Defined configuration:"
	CONF_LIST=$(cat "$CFG_FILE"| egrep "ENABLE|PROJECT")
	IFSOLD=$IFS
	IFS=$'\n'
	# Listando as zones
	for ITEM in $CONF_LIST;do
		CONF=$(echo "$ITEM" | awk -F"|" '{print $1}')
		STATUS=$(echo "$ITEM" | awk -F"|" '{print $2}')
		STATUS=$(echo "$STATUS"| sed 's/ //g' )
		ZONE[1]=$(echo "$ITEM" | awk -F"|" '{print $3}')
		ZONE[2]=$(echo "$ITEM" | awk -F"|" '{print $4}')
		
		#for Y in $(seq 1 2);do
		#	ZONE[$Y]=$(echo $ZONE[$Y] | sed "s/ //g")
		#done
		
		echo -e " cfg:\t${CONF}"
		echo -e "\t\t ${ZONE[1]};${ZONE[2]}" 
		
		#Para cada zone listar os alias
		for I in $(seq 1 2);do
			echo -e " zone:\t${ZONE[$I]}"
			ZONE_LIST=$(cat "$ZONE_FILE" | grep "${ZONE[$I]}")
			# echo "cat $ZONE_FILE | grep ${ZONE[$I]}"  #DEBUG
			#echo "ZONE_LIST: $ZONE_LIST" 	#DEBUG
			for ITEM2 in $ZONE_LIST; do
				ALIAS[1]=$(echo "$ITEM2" | awk -F"|" '{print $2}')
				ALIAS[2]=$(echo "$ITEM2" | awk -F"|" '{print $3}')
			done
			echo -e "\t\t ${ALIAS[1]};${ALIAS[2]}" 	
			
			# Para cada Alias listar o device
			for I in $(seq 1 2);do
				echo -e " alias:\t${ALIAS[$I]}"
				ALIAS_LIST=$(cat "$ALIAS_FILE" | grep "${ALIAS[$I]}")
			
				for ITEM3 in $ALIAS_LIST;do
					PORT[1]=$(echo "$ITEM3" | awk -F"|" '{print $2}')
				done
				echo -e "\t\t ${PORT[1]}" 	
			done
			
		done
	done
	
	echo
	#echo "STATUS: $STATUS"   # debug
	echo "Effective configuration:"
	case "$STATUS" in
	"PROJECT")
		echo "No Effective configurateion: (No Access)"
		;;
	"ENABLE")
		for ITEM in $CONF_LIST;do
			CONF=$(echo "$ITEM" | awk -F"|" '{print $1}')
			STATUS=$(echo "$ITEM" | awk -F"|" '{print $2}')
			ZONE[1]=$(echo "$ITEM" | awk -F"|" '{print $3}')
			ZONE[2]=$(echo "$ITEM" | awk -F"|" '{print $4}')
		
			echo -e " cfg:\t${CONF}"
			echo -e "\t\t ${ZONE[1]};${ZONE[2]}" 
		
			#Para cada zone listar os alias
			for I in $(seq 1 2);do
				echo -e " zone:\t${ZONE[$I]}"
				ZONE_LIST=$(cat "$ZONE_FILE" | grep "$ZONE[$I]")
				#echo "ZONE_LIST: $ZONE_LIST" 	#debug
				for ITEM2 in $ZONE_LIST;do
					ALIAS[1]=$(echo "$ITEM2" | awk -F"|" '{print $2}')
					ALIAS[2]=$(echo "$ITEM2" | awk -F"|" '{print $3}')
				done
				#echo -e "\t\t ${ALIAS[1]};${ALIAS[2]}" 	
			
				# Para cada Alias listar o device
				for I in $(seq 1 2);do
					#echo -e "alias:\t${ALIAS[$I]}"
					ALIAS_LIST=$(cat "$ALIAS_FILE" | grep "$ALIAS[$I]")
			
					for ITEM3 in $ALIAS_LIST;do
						PORT[1]=$(echo "$ITEM3" | awk -F"|" '{print $2}')
					done
					echo -e "\t\t ${PORT[1]}" 	
				done
			
			done
		done
		;;	
	esac
}


function insert()
{
	NAME="$1"
	ZONES="$2"
	
	ZONE1=$(echo "$2" | awk -F";" '{print $1}')
	ZONE2=$(echo "$2" | awk -F";" '{print $2}')
	
	#echo "ALIASES- $ALIAS1 e $ALIAS2"  #DEBUG
	EXISTE1=""
	EXISTE2=""
	
	EXISTE1=$(consulte "$NAME" "$CFG_FILE")
	EXISTE2=$(consulte2 "$ZONE1" "$ZONE_FILE")
	EXISTE3=$(consulte2 "$ZONE2" "$ZONE_FILE")
	
	if [ "$EXISTE1" -eq 0 ] && [ "$EXISTE2" -eq 1 ] && [ "$EXISTE3" -eq 1 ]  ;then
		echo "$NAME|PROJECT|$ZONE1|$ZONE2" >> "$CFG_FILE"
		echo "$ENTIDADE \"$NAME\" created."
		listAll "--auto"
	else
		echo "Could not create $ENTIDADE. Check the <$ENTIDADE name> or <Zone Names> informed"
		#echo "Alias $ALIAS_NAME already exists."	
	fi
}


function delete()
{
	NAME="$1"
	EXISTE=""
	EXISTE=$(consulte "$NAME" "$CFG_FILE")
	if [ "$EXISTE" -eq 0 ];then
		echo "$ENTIDADE \"$NAME\" not found!"
	else 
		cat "$CFG_FILE" | grep -v "^$NAME" > temp
		cat "temp" > "$CFG_FILE"
		rm -f temp
		echo "$ENTIDADE \"$NAME\" removed."
		listAll "--auto"
	fi
}


function rename()
{
	NAME="$1"
	NEW_NAME="$2"
	EXISTE=""
	EXISTE=$(consulte "$NAME" "$CFG_FILE")
	if [ "$EXISTE" -eq 0 ];then
		echo "$ENTIDADE $NAME not found!"
	else 
		EXISTE=""
		EXISTE=$(consulte "$NEW_NAME" "$CFG_FILE")
		if [ "$EXISTE" -eq 0 ];then
			NOVO=$(cat "$CFG_FILE" | grep "^$NAME"| sed "s/$NAME/$NEW_NAME/" )
			cat "$CFG_FILE" | grep -v "^$NAME" > temp
			cat "temp" > "$CFG_FILE"
			echo "$NOVO" >> "$CFG_FILE"
			echo "$ENTIDADE \"$NAME\" renamed for \"$NEW_NAME\"."
			listAll "--auto"
		else 
			echo "$ENTIDADE \"$NEW_NAME\" already exists."
		fi
		
		
	fi
}


function copy()
{
	NAME="$1"
	NEW_NAME="$2"
	EXISTE=""
	EXISTE=$(consulte "$NAME" "$CFG_FILE")
	if [ "$EXISTE" -eq 0 ];then
		echo "$ENTIDADE $NAME not found!"
		return 0
	else 
		EXISTE=""
		EXISTE=$(consulte "$NEW_NAME" "$CFG_FILE")
		if [ "$EXISTE" -eq 0 ];then
			NOVO=$(cat "$CFG_FILE" | grep "^$NAME"| sed "s/$NAME/$NEW_NAME/" )
			echo "$NOVO" >> "$CFG_FILE"
			echo "$ENTIDADE \"$NAME\" copied for \"$NEW_NAME\"."
			listAll "--auto"
		else 
			echo "$ENTIDADE \"$NEW_NAME\" already exists."
		fi
		
	fi
}

function enable()
{
	NAME="$1"
	EXISTE=""
	EXISTE=$(consulte "$NAME" "$CFG_FILE")
	if [ "$EXISTE" -eq 0 ];then
		echo "$ENTIDADE \"$NAME\" not found!"
		return 1
	fi
	
	echo "You are about to enable a new zonning configuration. This action will replace  the old zoning configuration with the current configuration selected. If the update changes to one or more traffic isolation zones, the update may result in localized disruption to trafic on ports associated with the traffic isolation zone changes."  
	echo "Do you want to enable \"$NAME\" configuration? (yes, y, no, n): [no] "
	read -p " " RESP
	
	RESP=$(echo "${RESP:-"N"}")
	RESP=$(echo $RESP| tr [a-z] [A-Z])
		
	case $RESP in 	
		Y|YES)	
			#Desativando todos
			sed -i "s/ENABLE/DISABLE/" $CFG_FILE
			sed -i "s/PROJECT/DISABLE/" $CFG_FILE  
			# ativando apenas o item desejado			
			NOVO=$(cat "$CFG_FILE" | grep "^$NAME"| sed "s/DISABLE/ENABLE/" )
			cat "$CFG_FILE" | grep -v "^$NAME" > temp
			cat "temp" > "$CFG_FILE"
			echo "$NOVO" >> "$CFG_FILE"
			echo "zone config \"$NAME\" is in effect"
			echo "Update flash ..."		
			#echo "$ENTIDADE update sucessfuly."	
			listAll "--auto"
			;;
		N|NO)
			echo "Aborted"
			return 1
			;;
		*)
			echo
			echo "Invalid option select (yes, y, no, n)"
			echo "Aborted"
			return 2
			;;			
	esac	
}


function disable()
{
	
	echo "You are about to disable zonning configuration. This action will disable any previous zoning configuration enabled."  
	echo "Do you want to disable zoning configuration? (yes, y, no, n): [no] "
	read -p " " RESP
	
	RESP=$(echo "${RESP:-"N"}")
	RESP=$(echo $RESP| tr [a-z] [A-Z])
		
	case $RESP in 	
		Y|YES)	
			#Desativando todos
			sed -i "s/ENABLE/PROJECT/" $CFG_FILE 
			# ativando apenas o item desejado			
			NOVO=$(cat "$CFG_FILE" | grep "^$NAME"| sed "s/ENABLE/DISABLE/" )
			cat "$CFG_FILE" | grep -v "^$NAME" > temp
			cat "temp" > "$CFG_FILE"
			echo "$NOVO" >> "$CFG_FILE"
		
			sleep 1s
			echo "Update flash ..."		
			echo "Effective configuration is empty. No Access default zone mode is ON"	
			listAll "--auto"
			;;
		N|NO)
			echo "Aborted"
			return 1
			;;
		*)
			echo
			echo "Invalid option select (yes, y, no, n)"
			echo "Aborted"
			return 2
			;;			
	esac
	
}

function save()
{
	echo "You are about to save the Defined zoning Configuration. This action will only save the changes on Defined configuration."  
	echo "Any changes made on Effective configuration will not take affect until it is re-enabled."
	echo "Do you want to save Defined zoning configuration only? (yes, y, no, n): [no] "
	read -p " " RESP
	
	RESP=$(echo "${RESP:-"N"}")
	RESP=$(echo $RESP| tr [a-z] [A-Z])
		
	case $RESP in 	
		Y|YES)	
	##		sed -i "s/committed 	- Access/committed 	- No Access/" $DEFZONE_FILE 
			echo "$ENTIDADE update sucessfuly."	
			listAll "--auto"
			;;
		N|NO)
			echo "Aborted"
			return 1
			;;
		*)
			echo
			echo "Invalid option select (yes, y, no, n)"
			echo "Aborted"
			return 2
			;;			
	esac
	echo "Update flash ..."
	sleep 1s
}

function clearfuncion()
{
	echo "The Clear All action will clear all Aliases, Zones, FA Zones an configurations in the Defined configurations."  
	echo "cfgSave may be run to close the transaction or cfgTransAbort may be run to cancel the transaction."
	echo "Do you really want to clear all configurations? (yes, y, no, n): [no] "
	read -p " " RESP
	
	RESP=$(echo "${RESP:-"N"}")
	RESP=$(echo $RESP| tr [a-z] [A-Z])
		
	case $RESP in 	
		Y|YES)	
			## Limpando todas as configurações
			echo > $CFG_FILE
			echo > $ZONE_FILE
			echo > $ALIAS_FILE
			echo > $DEFZONE_FILE
			
			echo "System clear!"	
			listAll "--auto"
			;;
		N|NO)
			echo "Aborted"
			return 1
			;;
		*)
			echo
			echo "Invalid option select (yes, y, no, n)"
			echo "Aborted"
			return 2
			;;			
	esac
	echo "Update flash ..."
	sleep 1s
}



OP=""
OP=$(echo "chamada- $0"| cut -d"/" -f4)
#echo "Opção: $OP"  ## DEBUG

case "$OP" in
	cfgcreate)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <CFG NAME> <\"ZONE_1;ZONE_2\">"
		else
			insert "$1" "$2"
		fi	
		;;
	cfgshow)
		listAll "$1"
		;;
	
	cfgdelete)
		if [ "$#" -lt 1 ]; then
			echo "Sintaxe error: $OP <CFG NAME>"
		else
			delete "$1"
		fi	
		;;
	cfgrename)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <CFG NAME> <NEW CFG NAME>"
		else
			rename "$1" "$2"
		fi	
		;;
	cfgcopy)
		if [ "$#" -lt 2 ]; then
			echo "Sintaxe error: $OP <CFG NAME> <NEW CFG NAME>"
		else
			copy "$1" "$2"
		fi	
		;;
	cfgenable)
		if [ "$#" -lt 1 ]; then
			echo "Sintaxe error: $OP <CFG NAME>"
		else
			enable "$1" 
		fi	
		;;
	cfgdisable)
		disable

		;;
	cfgsave)
		save
		;;
	cfgclear)
		clearfuncion
		;;			
	*)
		echo "Not implemented!"	
	;;
esac

